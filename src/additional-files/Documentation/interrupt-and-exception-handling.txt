Interrupt and Exception handling
--------------------------------

1. Introduction
---------------

o Interrupts and exceptions are special kinds of control transfer; they work
  somewhat like unprogrammed CALLs

o The difference between interrupts and exceptions is that interrupts are
  used to handle asynchronous events external to the processor, but exceptions
  handle conditions detected by the processor itself in the course of
  executing instructions

o The identification number of each defined exception and interrupt
  is called a vector

o The allowable range for vector numbers is 0 to 255. Vectors in the
  range 0 through 31 are reserved and should not be used. Vectors in the
  range 32 to 255 are designated as user-defined interrupts and are not
  reserved

2. Exception classifications
----------------------------

o Faults -- A fault is an exception that can generally be corrected and
  that, once corrected, allows the program to be restarted with no loss
  of continuity

o Traps -- A trap is an exception that is reported immediately following
  the execution of the trapping instruction

o Aborts -- An abort is an exception that does not always report the precise
  location of the instruction causing the exception and does not allow a
  restart of the program or task that caused the exception

3. Interrupt descriptor table (IDT)
-----------------------------------

o Associates each exception or interrupt vector with a gate descriptor for
  the procedure or task used to service the associated exception or
  interrupt

o Like the GDT and LDTs, the IDT is an array of 8-byte descriptors (in
  protected mode)

o To form an index into the IDT, the processor scales the exception or
  interrupt vector by eight (the number of bytes in a gate descriptor)
